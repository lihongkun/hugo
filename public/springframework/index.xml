<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Springframeworks on 泛泛之辈</title>
    <link>https://www.lihongkun.com/springframework/</link>
    <description>Recent content in Springframeworks on 泛泛之辈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 11 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.lihongkun.com/springframework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 单元测试</title>
      <link>https://www.lihongkun.com/springframework/spring_unit_test/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_unit_test/</guid>
      <description>&lt;p&gt;单元测试对于一个开发来说是一个基本素养。Java这方面的工业标准是使用JUnit。在使用了Spring框架及其衍生的相关框架后，会有不同程度的变化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot使用OpenAPI规范</title>
      <link>https://www.lihongkun.com/springframework/springboot_openapi/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_openapi/</guid>
      <description>&lt;p&gt;在WEB领域里面，随着前后端分离，后端的HTTP接口便需要去维护一份大而全的Rest API，一个比较靠谱的文档工具是必不可少的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot Actuators</title>
      <link>https://www.lihongkun.com/springframework/springboot_actuators/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_actuators/</guid>
      <description>&lt;p&gt;Spring Boot 提供了开箱即用的应用监控功能，对于大厂来说可能比较鸡肋，但是对于一些没有基础建设团队的中小公司是非常好用的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自定义Spring Boot Starter</title>
      <link>https://www.lihongkun.com/springframework/custom_springboot_starter/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/custom_springboot_starter/</guid>
      <description>&lt;p&gt;官方提供的Spring Boot Starter涵盖面非常广，几乎所有流行的组件和方案都可以找到对应的封装。不过每个系统总会有自己的公共代码，可以自己进行Starter的封装。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot 开箱即用</title>
      <link>https://www.lihongkun.com/springframework/springboot/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot/</guid>
      <description>&lt;p&gt;新建一个工程需要做很多的基础工作，依赖包引入，基础组件的配置。在微服务大行其道的今天，建立一个新工程是一个家常便饭的事情。其中的工作繁琐且容易出错。在Spring Boot 未出现之前，很多脚手架的项目用来解决这类通用的问题。Spring Boot出现之后，大多也都是转移到它身上了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring 注解配置</title>
      <link>https://www.lihongkun.com/springframework/spring_annotation/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_annotation/</guid>
      <description>&lt;p&gt;Spring Bean 的注解配置功能出现的比较早，但是开始流行却是由于SpringBoot的推动。初期只是提供几个注解简化一些配置，使用context:annotation-config来启用。随着AnnotationApplicationContext的出现，注解逐渐丰富，慢慢形成了一种 Java Config的体系，从而摆脱了XML。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring MVC 你必须关注点</title>
      <link>https://www.lihongkun.com/springframework/spring_mvc/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_mvc/</guid>
      <description>&lt;p&gt;Spring MVC配置简单，特别是在SpringBoot出现后基本都是开箱即用。在实际项目中通常是需要单独去处理一些特殊的情况，比如统一的异常处理，校验器以及国际化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器事件</title>
      <link>https://www.lihongkun.com/springframework/spring_container_events/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_events/</guid>
      <description>&lt;p&gt;Spring容器除了提供Bean的生命周期扩展点，还需要提供容器的生命周期扩展点。容器不像bean一样是由开发者定义的。框架代码编写的时候并不知道谁会关心。所以Spring采用的方式是将容器的生命周期通过事件机制发布出来，关心事件的开发者自行订阅。这是一个观察者模式的典型应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Aware机制</title>
      <link>https://www.lihongkun.com/springframework/spring_aware/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_aware/</guid>
      <description>&lt;p&gt;在使用spring的过程中比较好的设计是bean不依赖于容器。在一些特殊的情况下需要感知容器的存在，使用容器的提供的资源。Spring IoC容器提供了Aware机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器扩展</title>
      <link>https://www.lihongkun.com/springframework/spring_container_extend_points/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_extend_points/</guid>
      <description>&lt;p&gt;托管给Spring IoC 容器的Bean虽然不知道容器的存在，但是容器也提供了完整的扩展点，让使用者动态干预bean的定义和实例化，生命周期相关的事件都有对应的hook。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器基础使用</title>
      <link>https://www.lihongkun.com/springframework/spring_container_basic/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_basic/</guid>
      <description>&lt;p&gt;Spring IoC 容器是Java世界对于IoC实现的事实上的工业标准。基本上大型 Java应用都绕不过它。以至于滴滴在转型golang的时候搞了一个go-spring出来。本文介绍了Spring IoC 容器的基本使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tomcat连接器调优</title>
      <link>https://www.lihongkun.com/springframework/springboot_tomcat_connetor/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_tomcat_connetor/</guid>
      <description>&lt;p&gt;在并发不高的场景下是不需要在进行特殊的配置了,但是在并发量比较大的话springboot 对于默认的tomcat连接器参数可能会导致频频的连接拒绝现象.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot的embeded tomcat目录</title>
      <link>https://www.lihongkun.com/springframework/springboot_tomcat_directory/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_tomcat_directory/</guid>
      <description>&lt;p&gt;Springboot官方使用web的配置内嵌了tomcat , 其目录在正式环境下存在着诸多问题.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot使用logback的坑点</title>
      <link>https://www.lihongkun.com/springframework/springboot_logback/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_logback/</guid>
      <description>&lt;p&gt;尽管SpringBoot能够在application.properties来配置一些日志相关的内容,但是针对一个比较复杂,或者是有着自己运维体系的应用,这是远远不够用的.所以拓展自己的日志配置文件是必须的,官方推荐的是使用logback-spring.xml直接覆盖&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>