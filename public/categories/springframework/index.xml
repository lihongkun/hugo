<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>springframework on 泛泛之辈</title>
    <link>https://www.lihongkun.com/categories/springframework/</link>
    <description>Recent content in springframework on 泛泛之辈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 25 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.lihongkun.com/categories/springframework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 注解配置</title>
      <link>https://www.lihongkun.com/springframework/spring_annotation/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_annotation/</guid>
      <description>&lt;p&gt;Spring Bean 的注解配置功能出现的比较早，但是开始流行却是由于SpringBoot的推动。初期只是提供几个注解简化一些配置，使用context:annotation-config来启用。随着AnnotationApplicationContext的出现，注解逐渐丰富，慢慢形成了一种 Java Config的体系，从而摆脱了XML。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring MVC 你必须关注点</title>
      <link>https://www.lihongkun.com/springframework/spring_mvc/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_mvc/</guid>
      <description>&lt;p&gt;Spring MVC配置简单，特别是在SpringBoot出现后基本都是开箱即用。在实际项目中通常是需要单独去处理一些特殊的情况，比如统一的异常处理，校验器以及国际化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MVC模式在服务端的过去、现状和未来</title>
      <link>https://www.lihongkun.com/design/mvc/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/design/mvc/</guid>
      <description>&lt;p&gt;Model-View-Controller模式最开始出现于Client-Server流行的时代，它很好地解决了视图展示代码和模型及其业务逻辑代码的耦合。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面向切面编程</title>
      <link>https://www.lihongkun.com/design/aop/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/design/aop/</guid>
      <description>&lt;p&gt;面向切面编程（Aspect Oriented Programming），简称AOP。作为面向对象编程的一个强力补充，在业务系统中很少被关注，却随着Spring的出现而名声鹊起。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器事件</title>
      <link>https://www.lihongkun.com/springframework/spring_container_events/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_events/</guid>
      <description>&lt;p&gt;Spring容器除了提供Bean的生命周期扩展点，还需要提供容器的生命周期扩展点。容器不像bean一样是由开发者定义的。框架代码编写的时候并不知道谁会关心。所以Spring采用的方式是将容器的生命周期通过事件机制发布出来，关心事件的开发者自行订阅。这是一个观察者模式的典型应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Aware机制</title>
      <link>https://www.lihongkun.com/springframework/spring_aware/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_aware/</guid>
      <description>&lt;p&gt;在使用spring的过程中比较好的设计是bean不依赖于容器。在一些特殊的情况下需要感知容器的存在，使用容器的提供的资源。Spring IoC容器提供了Aware机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器扩展</title>
      <link>https://www.lihongkun.com/springframework/spring_container_extend_points/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_extend_points/</guid>
      <description>&lt;p&gt;托管给Spring IoC 容器的Bean虽然不知道容器的存在，但是容器也提供了完整的扩展点，让使用者动态干预bean的定义和实例化，生命周期相关的事件都有对应的hook。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring IoC 容器基础使用</title>
      <link>https://www.lihongkun.com/springframework/spring_container_basic/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/spring_container_basic/</guid>
      <description>&lt;p&gt;Spring IoC 容器是Java世界对于IoC实现的事实上的工业标准。基本上大型 Java应用都绕不过它。以至于滴滴在转型golang的时候搞了一个go-spring出来。本文介绍了Spring IoC 容器的基本使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>控制反转与依赖注入</title>
      <link>https://www.lihongkun.com/design/ioc/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/design/ioc/</guid>
      <description>&lt;p&gt;控制反转是Spring框架的核心内容，也是因为Spring的关系这个模式为大众所知晓。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tomcat连接器调优</title>
      <link>https://www.lihongkun.com/springframework/springboot_tomcat_connetor/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_tomcat_connetor/</guid>
      <description>&lt;p&gt;在并发不高的场景下是不需要在进行特殊的配置了,但是在并发量比较大的话springboot 对于默认的tomcat连接器参数可能会导致频频的连接拒绝现象.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot的embeded tomcat目录</title>
      <link>https://www.lihongkun.com/springframework/springboot_tomcat_directory/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_tomcat_directory/</guid>
      <description>&lt;p&gt;Springboot官方使用web的配置内嵌了tomcat , 其目录在正式环境下存在着诸多问题.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Springboot使用logback的坑点</title>
      <link>https://www.lihongkun.com/springframework/springboot_logback/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.lihongkun.com/springframework/springboot_logback/</guid>
      <description>&lt;p&gt;尽管SpringBoot能够在application.properties来配置一些日志相关的内容,但是针对一个比较复杂,或者是有着自己运维体系的应用,这是远远不够用的.所以拓展自己的日志配置文件是必须的,官方推荐的是使用logback-spring.xml直接覆盖&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>